'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var REDUX_COOKIES_GET = 'REDUX_COOKIES_GET';
var REDUX_COOKIES_SET = 'REDUX_COOKIES_SET';
var REDUX_COOKIES_EXPIRE = 'REDUX_COOKIES_EXPIRE';
var REDUX_COOKIES_REMOVE = 'REDUX_COOKIES_REMOVE';

var getName = exports.getName = function getName(prefix, itemName) {
  return prefix + itemName;
};

var getCookie = exports.getCookie = function getCookie(name) {
  return { type: REDUX_COOKIES_GET, name: name };
};

var setCookie = exports.setCookie = function setCookie(name, value) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  return { type: REDUX_COOKIES_SET, name: name, value: value, options: options };
};

var expireCookie = exports.expireCookie = function expireCookie(name) {
  return { type: REDUX_COOKIES_EXPIRE, name: name };
};

var removeCookie = exports.removeCookie = function removeCookie(name, options) {
  return { type: REDUX_COOKIES_REMOVE, name: name, options: options };
};

var createCookieMiddleware = exports.createCookieMiddleware = function createCookieMiddleware(cookies) {
  var prefix = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

  var actionsMap = {};

  REDUX_COOKIES_GET = getName(prefix, REDUX_COOKIES_GET);
  REDUX_COOKIES_SET = getName(prefix, REDUX_COOKIES_SET);
  REDUX_COOKIES_EXPIRE = getName(prefix, REDUX_COOKIES_EXPIRE);
  REDUX_COOKIES_REMOVE = getName(prefix, REDUX_COOKIES_REMOVE);

  actionsMap[REDUX_COOKIES_GET] = function (action) {
    try {
      return cookies.get(action.name);
    } catch (e) {
      return undefined;
    }
  };

  actionsMap[REDUX_COOKIES_SET] = function (action) {
    return cookies.set(action.name, action.value, action.options);
  };

  actionsMap[REDUX_COOKIES_EXPIRE] = function (action) {
    return cookies.set(action.name, undefined);
  };

  actionsMap[REDUX_COOKIES_REMOVE] = function (action) {
    // if cookies lib has remove support
    if (cookies.remove) {
      return cookies.remove(action.name, action.options);
    }
    return cookies.set(action.name, undefined);
  };

  if (process && process.env && process.env.NODE_ENV !== 'production') {
    if (!('get' in cookies) || !('set' in cookies)) {
      throw new Error('Your cookie object must implement get and set function,  {get : function(name){/*...*/}, set : function(name, value, options){/*...*/}}');
    }
  }

  return function () {
    return function (next) {
      return function (action) {
        var currentActionHandler = actionsMap[action.type];

        if (currentActionHandler) {
          return currentActionHandler(action);
        }

        return next(action);
      };
    };
  };
};

exports.default = createCookieMiddleware;