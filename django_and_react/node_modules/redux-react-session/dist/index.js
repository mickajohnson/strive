'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sessionReducer = exports.sessionService = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('./constants');

var constant = _interopRequireWildcard(_constants);

var _localforage = require('localforage');

var localForage = _interopRequireWildcard(_localforage);

var _actions = require('./actions');

var _reducer = require('./reducer');

var _reducer2 = _interopRequireDefault(_reducer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var instance = void 0;

var sessionService = exports.sessionService = function () {
  function sessionService(store, refreshOnCheckAuth, redirectPath) {
    _classCallCheck(this, sessionService);

    if (!instance) {
      instance = this;
      instance.store = store;
      instance.refreshOnCheckAuth = refreshOnCheckAuth;
      instance.redirectPath = redirectPath;
    }
    return instance;
  }

  _createClass(sessionService, null, [{
    key: 'setOptions',
    value: function setOptions(store) {
      var refreshOnCheckAuth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var redirectPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'login';

      instance.store = store;
      instance.refreshOnCheckAuth = refreshOnCheckAuth;
      instance.redirectPath = redirectPath;
    }
  }, {
    key: 'initSessionService',
    value: function initSessionService(store) {
      var refreshOnCheckAuth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var redirectPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'login';

      instance = new sessionService(store, refreshOnCheckAuth, redirectPath);
      sessionService.refreshFromLocalStorage();
    }
  }, {
    key: 'refreshFromLocalStorage',
    value: function refreshFromLocalStorage() {
      return sessionService.loadSession().then(function () {
        instance.store.dispatch((0, _actions.getSessionSuccess)());
        sessionService.loadUser().then(function (user) {
          instance.store.dispatch((0, _actions.getUserSessionSuccess)(user));
        });
      }).catch(function () {
        instance.store.dispatch((0, _actions.getSessionError)());
      });
    }
  }, {
    key: 'checkAuth',
    value: function checkAuth(nextState, replace, next) {
      var _instance = instance,
          refreshOnCheckAuth = _instance.refreshOnCheckAuth,
          store = _instance.store;

      sessionService.loadSession().then(function () {
        refreshOnCheckAuth && store.dispatch((0, _actions.getSessionSuccess)());
        sessionService.loadUser().then(function (user) {
          refreshOnCheckAuth && store.dispatch((0, _actions.getUserSessionSuccess)(user));
          next();
        }).catch(function () {
          return next();
        });
      }).catch(function () {
        refreshOnCheckAuth && store.dispatch((0, _actions.getSessionError)());
        refreshOnCheckAuth && store.dispatch((0, _actions.getUserSessionError)());
        replace({
          pathname: instance.redirectPath,
          state: { nextPathname: nextState.location.pathname }
        });
        next();
      });
    }
  }, {
    key: 'saveSession',
    value: function saveSession(session) {
      return localForage.setItem(constant.USER_SESSION, session).then(function () {
        return instance.store.dispatch((0, _actions.getSessionSuccess)());
      }).catch(function () {
        return instance.store.dispatch((0, _actions.getSessionError)());
      });
    }
  }, {
    key: 'loadSession',
    value: function loadSession() {
      return new Promise(function (resolve, reject) {
        localForage.getItem(constant.USER_SESSION).then(function (currentSession) {
          if (currentSession) {
            resolve(currentSession);
          } else {
            reject('Session not found');
          }
        }).catch(function (err) {
          return reject(err);
        });
      });
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return localForage.removeItem(constant.USER_SESSION).then(function () {
        instance.store.dispatch((0, _actions.getSessionError)());
      }).catch(function (err) {
        return err;
      });
    }
  }, {
    key: 'saveUser',
    value: function saveUser(user) {
      return localForage.setItem(constant.USER_DATA, user).then(function (user) {
        return instance.store.dispatch((0, _actions.getUserSessionSuccess)(user));
      }).catch(function () {
        return instance.store.dispatch((0, _actions.getUserSessionError)(user));
      });
    }
  }, {
    key: 'loadUser',
    value: function loadUser() {
      return new Promise(function (resolve, reject) {
        localForage.getItem(constant.USER_DATA).then(function (currentUser) {
          if (currentUser) {
            resolve(currentUser);
          } else {
            reject('User not found');
          }
        }).catch(function (err) {
          return reject(err);
        });
      });
    }
  }, {
    key: 'deleteUser',
    value: function deleteUser() {
      return localForage.removeItem(constant.USER_DATA).then(function () {
        instance.store.dispatch((0, _actions.getUserSessionError)());
      }).catch(function (err) {
        return err;
      });
    }
  }]);

  return sessionService;
}();

var sessionReducer = exports.sessionReducer = _reducer2.default;